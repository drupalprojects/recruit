<?php
/**
  * @file
  * Defines abstract base test class for the Drupal Recruit module tests.
  */

/**
 * Abstract class for Drupal Recruit testing. All Drupal Recruit tests should extend this
 * class.
 */

abstract class RecruitBaseTestCase extends DrupalWebTestCase {

  /**
   * Helper function to get different combinations of permission sets.
   *
   * @param $set
   *  Can be a single string (from the following) or can be an array containing
   *  multiple values that should be merged:
   *    'site admin': Admin permissions for Drupal core modules
   *    'recruiter admin': All recruit "administer X" permissions
   */
  protected function permissionBuilder($sets) {
    if (is_string($sets)) {
      $sets = array($sets);
    }
    $site_admin = array(
      'administer blocks',
      'administer comments',
      'access dashboard',
      'administer filters',
      'administer image styles',
      'administer menu',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'administer url aliases',
      'administer search',
      'administer modules',
      'administer site configuration',
      'administer themes',
      'administer software updates',
      'administer actions',
      'access administration pages',
      'access site in maintenance mode',
      'access site reports',
      'block IP addresses',
      'administer taxonomy',
      'administer permissions',
      'administer users',
      'administer rules',
    );
    $recruit_admin = array(
      'administer application types',
      'administer applications',
      'access applications',
      'access recruit administration pages',
      'view the administration theme',
      'access toolbar',
    );
    $recruiter = array(
      'access applications',
      'access recruit administration pages',
      'view the administration theme',
      'access toolbar',
    );
    
    $candidate = array(
      'access content',
    );

    $final_permissions = array();

    foreach ($sets as $set) {
      switch ($set) {
        case 'site admin':
          $final_permissions = array_merge($final_permissions, $site_admin);
          break;
        case 'recruit admin':
          $final_permissions = array_merge($final_permissions, $recruit_admin);
          break;
        case 'recruiter':
          $final_permissions = array_merge($final_permissions, $recruiter);
          break;
        case 'candidate':
          $final_permissions = array_merge($final_permissions, $candidate);
          break;
      }
    }

    return $final_permissions;
  }

  /**
   * Wrapper to easily create users from arrays returned by permissionBuilder().
   *
   * @param $set
   *  See permissionBuilder() function
   * @return
   *  A user with the permissions returned from permissionBuilder().
   */
  protected function createUserWithPermissionHelper($set) {
    $permissions = $this->permissionBuilder($set);
    $user = $this->drupalCreateUser($permissions);
    return $user;
  }
  
  /**
   * Returns a site administrator user. Only has permissions for administering
   * modules in Drupal core.
   */
  protected function createSiteAdmin() {
    return $this->createUserWithPermissionHelper('site admin');
  }

  /**
   * Returns a recruit administrator user. Only has permissions for administering
   * Recruit modules.
   */
  protected function createRecruitAdmin() {
    return $this->createUserWithPermissionHelper('recruit admin');
  }
  
  /**
   * Returns a recruiter. It can only create/edit/delete jobs and applications.
   */
  protected function createRecruiter() {
    return $this->createUserWithPermissionHelper('recruiter');
  }
  
  /**
   * Returns a candidate user.
   */
  protected function createCandidate() {
    return $this->createUserWithPermissionHelper('candidate');
  }

}
