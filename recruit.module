<?php

/**
 * @file
 * Global recruit module.
 */

/**
 * Implements hook_menu().
 */
function recruit_menu() {
  $items = array();

  $items['admin/recruit'] = array(
    'title' => 'Recruit',
    'description' => 'Administer your jobs and applications.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access recruit administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  /*
  $items['admin/recruit/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure settings for your recruitment site.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
   *
   */
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function recruit_entity_info() {
  $return =  array(
    'recruit_application' => array(
      'label' => t('Application'),
      'entity class' => 'RecruitApplication',
      'controller class' => 'EntityAPIController',      
      'base table' => 'recruit_application',
      'uri callback' => 'recruit_application_uri',
      // 'access callback' => 'recruit_application_access',
      'module' => 'recruit_application',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'aid',
        'bundle' => 'node_type',
        'label' => 'aid',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full application'),
          'custom settings' => FALSE,
        ),
      ),
      'static cache' => FALSE,
    ),
  );

  foreach (node_type_get_names() as $type => $name) {
    $return['recruit_application']['bundles']['recruit_application_node_' . $type] = array(
      'label' => t('@node_type application', array('@node_type' => $name)),
      'admin' => array(
        'path' => 'admin/structure/types/manage/%recruit_application_node_type/application',
        'bundle argument' => 4,
        'real path' => 'admin/structure/types/manage/' . str_replace('_', '-', $type) . '/application',
        'access arguments' => array('administer content types'),
      ),
    );
  }

  return $return;
}

/**
 * Finds all fields of a particular field type.
 *
 * @param $field_type
 *   The type of field to search for.
 * @param $entity_type
 *   Optional entity type to restrict the search to.
 *
 * @return
 *   An array of the matching fields keyed by the field name.
 */
function recruit_info_fields($field_type, $entity_type = NULL) {
  $fields = array();

  foreach (field_info_fields() as $field_name => $field) {
    if ($field['type'] == $field_type) {
      // Add this field to the return array if no entity type was specified or
      // if the specified type exists in the field's bundles array.
      if (empty($entity_type) || in_array($entity_type, array_keys($field['bundles']))) {
        $fields[$field_name] = $field;
      }
    }
  }

  return $fields;
}

/**
 * Load a single entity object using the passed in entity_type and entity_id
 *
 * @param $entity_type
 *   The type of entity
 * @param $entity_id
 *   The id of the entity
 *
 * @return
 *   An entity object.
 */
function recruit_entity_load_single($entity_type, $entity_id) {
  $entity_load = entity_load($entity_type, array($entity_id));

  if (!empty($entity_load)) {
    $entity = $entity_load[$entity_id];

    //Adding extra entity information.
    $entity->entity_type = $entity_type;
    $entity->entity_id = $entity_id;
    return $entity;
  }
}

/**
 * Implements hook_permission().
 */
function recruit_permission() {
  $permissions = array(
    'access recruit administration pages' =>  array(
      'title' => t('Access recruit administration pages'),
      'description' => t('Access drupal recruits administration pages'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_forms().
 */
function recruit_forms() {
  $forms = array();
  foreach (node_type_get_types() as $type) {
    $forms["recruit_application_node_" . $type->type . "_form"]['callback'] = 'recruit_application_application_form';
  }
  return $forms;
}

/**
 * Menu loader callback for Field UI paths.
 *
 * Return a application bundle name from a node type in the URL.
 */
function recruit_application_node_type_load($name) {
  if ($type = node_type_get_type(strtr($name, array('-' => '_')))) {
    return 'recruit_application_node_' . $type->type;
  }
}

/**
 * Create empty application object.
 * It's better to use recruit_application_new();
 *
 * @param $values
 *   You must pass $values array even if it's empty.
 *   Example:
 *   recruit_application_create(array('first_name' => '', 'last_name' => '', 'status' => 1, 'type' => $type));
 *   or
 *   recruit_application_create(array());
 *
 * @return
 *   Empty application object.
 */
function recruit_application_create(array $values) {
  return new RecruitApplication($values);
}

/**
 * Returns an initialized application object.
 *
 * @param $type
 *   The machine-readable type of the application.
 *
 * @return
 *   A application object with all default fields initialized.
 */
function recruit_application_new($nid) {

  $values = array(
    'aid' => '',
    'nid' => $nid,
    'uid' => '',
    'created' => '',
    'changed' => '',
    'status' => 1,    
  );
  
  return new RecruitApplication($values);
}

/**
 * Fetch a application object.
 *
 * @param $aid
 *   Integer specifying the application id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $application object or FALSE if it cannot be loaded.
 *
 * @see recruit_application_load_multiple()
 */
function recruit_application_load($aid, $reset = FALSE) {
  $applications = recruit_application_load_multiple(array($aid), array(), $reset);
  return reset($applications);
}

/**
 * Load multiple applications based on certain conditions.
 *
 * @param $aids
 *   An array of application IDs.
 * @param $conditions
 *   An array of conditions to match against the {recruit_application} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of application objects, indexed by pid.
 *
 * @see entity_load()
 * @see recruit_application_load()
 */
function recruit_application_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('recruit_application', $aids, $conditions, $reset);
}

/**
 * Saves a application to the database.
 *
 * @param $application
 *   The application object.
 */
function recruit_application_save(RecruitApplication $application) {
  return $application->save();
}

/**
 * Deletes a application.
 */
function recruit_application_delete(RecruitApplication $application) {
  $application->delete();
}

/**
 * Delete multiple applications.
 *
 * @param $aids
 *   An array of application IDs.
 */
function recruit_application_delete_multiple(array $aids) {
  entity_get_controller('recruit_application')->delete($aids);
}

/**
 * Default uri callback.
 *
 * @see RecruitApplication::uri()
 */
function recruit_application_uri($application) {
  return array(
    'path' => 'recruit-application/' . $application->aid,
  );
}

/**
 * The class used for application entities.
 */
class RecruitApplication extends EntityDB {

  public function __construct($values = array()) {
    if (isset($values['user'])) {
      $this->setUser($values['user']);
      unset($values['user']);
    }
    parent::__construct($values, 'recruit_application');
  }

  /**
   * Returns the user owning this application.
   */
  public function user() {
    return user_load($this->uid);
  }

  /**
   * Sets a new user owning this application.
   */
  public function setUser($account) {
    $this->uid = $account->uid;
  }

  /**
   * Gets the associated application type object.
   *
   * @return RecruitApplicationType
   */
  public function getType() {
    return recruit_application_node_type_load($this->type);
  }

  /**
   * Returns the URI for this application. May be altered via hook_entity_info().
   */
  public function uri() {
    return entity_uri('recruit_application', $this);
  }

  /**
   * Returns the full url() for the application.
   */
  public function url() {
    $uri = $this->uri();
    return url($uri['path'], $uri);
  }

  /**
   * Returns the drupal path to this application.
   */
  public function path() {
    $uri = $this->uri();
    return $uri['path'];
  }

  /**
   * Returns parent save method.
   */
  public function save() {
    //Always set changed time when saving a application.
    $this->changed = REQUEST_TIME;
    
    //If this is a new application.
    if (empty($this->application_id)) {
      $this->created = REQUEST_TIME;
    }

    return parent::save();
  }
}