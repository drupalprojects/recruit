<?php

/**
 * @file
 * Functional tests for the application module.
 */

/**
 * Test the application and application type CRUD.
 */
class RecruitApplicationUIAdminTest extends RecruitBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Recruit application administration UI',
      'description' => 'Tests creating, deleting and editing applications and applicaiton types.',
      'group' => 'Recruit',
    );
  }

  function setUp() {
    parent::setUp('recruit_application_ui', 'recruit_job_ui');
    
    // User creation for different operations.
    $this->recruit_admin = $this->createRecruitAdmin();
    $this->recruiter = $this->createRecruiter();
    $this->candidate = $this->createCandidate();
  }

  /**
   * Test the admin menus for applications
   */
  public function testRecruitApplicationUIAdminMenus() {
    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the recruit admin section.
    $this->drupalGet('admin/recruit');
    $this->assertResponse(200, t('Recruit admin user can access the recruit admin section'));
    
    // Ensure link to application list is present.
    $this->assertText(t('Applications'), t('%applications link is present in the recruit admin section (admin/recruit)', array('%applications' => t('Applications'))));
    // Ensure that the "Create application" link does NOT appear in the recruit admin section (admin/recruit).
    $this->assertNoText(t('Create application'), t('Ensure that the "%createapplication" link does NOT appear in the recruit admin section (admin/recruit)', array('%createapplication' => t('Create application'))));
  }

  /**
   * Test the permissions to access the application listing.
   */
  public function testRecruitApplicationUIAccessApplicationList() {
    // Login with normal user.
    $this->drupalLogin($this->candidate);

    // Access to the admin application list.
    $this->drupalGet('admin/recruit/applications');

    $this->assertResponse(403, t('Normal user is not able to access the application admin list page'));


    // Login as recruiter..
    $this->drupalLogin($this->recruiter);

    // Access to the admin application list.
    $this->drupalGet('admin/recruit/applications');

    $this->assertResponse(200, t('Recruiter user can access the application admin list page'));

    // Ensure that the link is NOT available to recriters.
    $this->assertNoText(t('Create application'), t('%createapplication link is NOT present in the admin list page', array('%createapplication' => t('Create application'))));
    // Ensure that the views empty is present.
    $this->assertText(t('No applications have been created yet.'), t('The views empty text "%application_empty_text" should appear.', array('%application_empty_text' => t('No applications have been created yet.'))));

    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the admin application list.
    $this->drupalGet('admin/recruit/applications');

    $this->assertResponse(200, t('Recruit admin user can access the application admin list page'));

    // Ensure that the link for creating applications is in place.
    $this->assertText(t('Create application'), t('%createapplication link is present in the admin list page', array('%createapplication' => t('Create application'))));
    // Ensure that the views empty is present.
    $this->assertText(t('No applications have been created yet.'), t('The views empty text "%application_empty_text" should appear.', array('%application_empty_text' => t('No applications have been created yet.'))));
  }

  /**
   * Test the access to the application types listing page.
   */
  public function testRecruitApplicationUIAccessApplicationTypes() {
    // Login with normal user.
    $this->drupalLogin($this->candidate);

    // Access to the application types listing.
    $this->drupalGet('admin/recruit/applications/types');

    $this->assertResponse(403, t('Normal user is not able to access the application types listing page'));

    // Login as a recruiter
    $this->drupalLogin($this->recruiter);

    // Access to the application types listing.
    $this->drupalGet('admin/recruit/applications/types');

    $this->assertResponse(403, t('Recruiter is not able to access the application types listing page'));

    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the application types listing.
    $this->drupalGet('admin/recruit/applications/types');

    $this->assertResponse(200, t('Recruit admin user can access the application types listing page'));

    // Ensure that the link for create application types is in place.
    $this->assertText(t('Add application type'), t('\'Add application type\' link is present in the admin list page'));

    // Get all the application types and check if they are listed.
    $application_types = recruit_application_get_types();
    foreach ($application_types as $type) {
      $this->assertText($type->label, t('%type is present in the application type listing', array('%type' => $type->label)));
    }
  }

  /**
   * Test adding a new application type.
   */
  public function testRecruitApplicationUIAddApplicationType() {
    // Login with normal user.
    $this->drupalLogin($this->candidate);

    // Access to the application types listing.
    $this->drupalGet('admin/recruit/applications/types/add');

    $this->assertResponse(403, t('Normal user is not able to access the application types add page'));

    // Login as a recruiter
    $this->drupalLogin($this->recruiter);

    // Access to the application types listing.
    $this->drupalGet('admin/recruit/applications/types/add');

    $this->assertResponse(403, t('Recruiter is not able to access the application types add page'));

    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the application types listing.
    $this->drupalGet('admin/recruit/applications/types/add');

    $this->assertResponse(200, t('Recruit admin user can access the application types add page'));
    
    // Create an additional application type.
    $edit = array(
      'label' => 'New Application Type',
      'type' => 'new_application_type',
    );
    $this->drupalPost(NULL, $edit, t('Save application type'));
    
    // Load all application types and clear internal cache.
    recruit_application_type_reset();
    $application_types = recruit_application_get_types();

    // Check if the application type has been created in database and if it appears
    // in the application types listing.
    $this->assertTrue(!empty($application_types[$edit['type']]), t('Application type has been correctly created'));
    $this->assertEqual($this->url, url('admin/recruit/applications/types', array('absolute' => TRUE)), t('Redirect page after creating a application type is the application types listing'));
    //$this->assertText(t('Application type saved'), t('Message after saving a new application type is displayed'));
    $this->assertText($edit['label'], t('Application type just created appears in application types listing'));
  }

  /**
   * Edit a application type.
   */
  public function testRecruitApplicationUIEditApplicationType() {
    // Login with normal user.
    $this->drupalLogin($this->candidate);

    // Access to the application type edit form.
    $this->drupalGet('admin/recruit/applications/types/manage/application');

    $this->assertResponse(403, t('Normal user is not able to access the application types edit page'));

    // Login as a recruiter
    $this->drupalLogin($this->recruiter);

    // Access to the application type edit form.
    $this->drupalGet('admin/recruit/applications/types/manage/application');

    $this->assertResponse(403, t('Recruiter is not able to access the application types edit page'));

    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the application types listing.
    $this->drupalGet('admin/recruit/applications/types/manage/application');

    $this->assertResponse(200, t('Recruit admin user can access the application types edit page'));

    //Load all application types.
    $application_types = recruit_application_get_types();

    $this->assertFieldById('edit-label', $application_types['application']->label, t('Application type name appears in the correct field of application type edit form'));
  }

  /**
   * Delete a application type.
   */
  public function testRecruitApplicationUIDeleteApplicationType() {
    // Login with normal user.
    $this->drupalLogin($this->candidate);

    // Access to the application type delete form.
    $this->drupalGet('admin/recruit/applications/types/manage/application/delete');

    $this->assertResponse(403, t('Normal user is not able to access the application types delete page'));

    // Login as a recruiter
    $this->drupalLogin($this->recruiter);

    // Access to the application type delete form.
    $this->drupalGet('admin/recruit/applications/types/manage/application/delete');

    $this->assertResponse(403, t('Recruiter is not able to access the application types delete page'));

    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the application type delete form.
    $this->drupalGet('admin/recruit/applications/types/manage/application/delete');

    $this->assertResponse(200, t('Recruit admin user can access the application types delete page'));

    //Load all application types.
    $application_types = recruit_application_get_types();

    // Check the integrity of the application type delete confirmation form.
    $this->pass('Test the application type delete confirmation form:');
    $this->assertTitle(t('Are you sure you want to delete the !name type Application?', array('!name' => $application_types['application']->label)) . ' | Drupal', t('The confirmation message is displayed'));
    $this->assertText(t('This action cannot be undone'), t('A warning notifying the user about the action can\'t be undone is displayed.'));
    $this->assertFieldById('edit-submit', t('Confirm'), t('Delete button is present'));
    $this->assertText(t('Cancel'), t('Cancel is present'));

    // Delete the application type
    $this->drupalPost(NULL, array(), t('Confirm'));

    $this->assertTrue($this->url == url('admin/recruit/applications/types', array('absolute' => TRUE)), t('Landing page after deleting an applicaiton type is the application types listing page'));

    // Check if the application is present in the application listing.
    $this->assertText(t('Deleted Application type !name.', array('!name' => $application_types['application']->label)), t('\'Deleted Application type Application.\' message is displayed'));

    // Load all application types and clear internal cache.
    recruit_application_type_reset();
    $application_types = recruit_application_get_types();
    // Look for the application type.
    $this->assertTrue(empty($application_types['application']), t('Application type doesn\'t exist anymore after deletion'));
  }

  /**
   * Access to the manage fields admin screen.
   */
  public function testRecruitApplicationUIApplicationTypeManageFields() {
    // Login with normal user.
    $this->drupalLogin($this->candidate);

    // Access to the application type manage fields screen.
    $this->drupalGet('admin/recruit/applications/types/manage/application/fields');

    $this->assertResponse(403, t('Normal user is not able to access the application type manage fields screen'));

    // Login as a recruiter
    $this->drupalLogin($this->recruiter);

    // Access to the application type manage fields screen.
    $this->drupalGet('admin/recruit/applications/types/manage/application/fields');

    $this->assertResponse(403, t('Recruiter is not able to access the application type manage fields screen'));

    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the application type manage fields screen.
    $this->drupalGet('admin/recruit/applications/types/manage/application/fields');

    $this->assertResponse(200, t('Recruit admin user can access the application type manage fields screen'));
  }

  /**
   * Access to the display fields admin screen.
   */
  public function testRecruitApplicationUIApplicationTypeDisplayFields() {
    // Login with normal user.
    $this->drupalLogin($this->candidate);

    // Access to the application type display fields screen.
    $this->drupalGet('admin/recruit/applications/types/manage/application/display');

    $this->assertResponse(403, t('Normal user is not able to access the application type display fields screen'));

    // Login as a recruiter
    $this->drupalLogin($this->recruiter);

    // Access to the application type display fields screen.
    $this->drupalGet('admin/recruit/applications/types/manage/application/display');

    $this->assertResponse(403, t('Recruiter is not able to access the application type display fields screen'));

    // Login with recruit admin.
    $this->drupalLogin($this->recruit_admin);

    // Access to the application type display fields screen.
    $this->drupalGet('admin/recruit/applications/types/manage/application/display');

    $this->assertResponse(200, t('Recruit admin user can access the application type display fields screen'));
  }
  
}