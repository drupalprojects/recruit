<?php
// $Id$

/**
 * @file
 * General UI module for recruit_application.module.
 */

/**
 * Implements hook_menu().
 */
function recruit_application_ui_menu() {
  $items = array();
  
  //Frontend menu item.
  $items['recruit-application/%recruit_application'] = array(
    'page callback' => 'recruit_application_ui_view_page',
    'page arguments' => array(1),
    'access callback' => 'recruit_application_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/recruit_application_ui.pages.inc',
  );

  $items['admin/recruit/applications/add'] = array(
    'title' => 'Create application',
    'description' => 'Advertise application listing.',
    'page callback' => 'recruit_application_ui_add_page',
    'access callback' => 'recruit_application_ui_application_add_any_access',
    'weight' => 10,
    'file' => 'includes/recruit_application_ui.applications.inc',
  );

  foreach (recruit_application_types() as $type => $application_type) {
    $items['admin/recruit/applications/add/' . strtr($type, array('_' => '-'))] = array(
      'title' => 'Create @name',
      'title arguments' => array('@name' => $application_type->name),
      'description' => $application_type->description,
      'page callback' => 'recruit_application_ui_application_form_wrapper',
      'page arguments' => array(recruit_application_new($type)),
      'access callback' => 'recruit_application_access',
      'access arguments' => array('create', $type),
      'file' => 'includes/recruit_application_ui.applications.inc',
    );
  }

  $items['admin/recruit/applications/%recruit_application'] = array(
    'title callback' => 'recruit_application_ui_application_title',
    'title arguments' => array(3),
    'page callback' => 'recruit_application_ui_application_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'recruit_application_access',
    'access arguments' => array('update', 3),
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/recruit_application_ui.applications.inc',
  );

  $items['admin/recruit/applications/%recruit_application/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  $items['admin/recruit/applications/%recruit_application/delete'] = array(
    'title' => 'Delete a application',
    'page callback' => 'recruit_application_ui_application_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'recruit_application_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/recruit_application_ui.applications.inc',
  );

  $items['admin/recruit/applications/types'] = array(
    'title' => 'application types',
    'description' => 'Manage application types.',
    'page callback' => 'recruit_application_ui_types_overview',
    'access arguments' => array('administer application types'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/recruit_application_ui.types.inc',
  );

  $items['admin/recruit/applications/types/add'] = array(
    'title' => 'Add application type',
    'page callback' => 'recurit_application_ui_application_type_form_wrapper',
    'page arguments' => array(recruit_application_type_new()),
    'access arguments' => array('administer application types'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/recruit_application_ui.types.inc',
  );

  $items['admin/recruit/applications/types/%recruit_application_type'] = array(
    'title callback' => 'recruit_application_type_title',
    'title arguments' => array(4),
    'page callback' => 'recurit_application_ui_application_type_form_wrapper',
    'page arguments' => array(4),
    'access arguments' => array('administer application types'),
    'file' => 'includes/recruit_application_ui.types.inc',
  );

  $items['admin/recruit/applications/types/%recruit_application_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/recruit/applications/types/%recruit_application_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'recruit_application_ui_application_type_delete_form_wrapper',
    'page arguments' => array(4),
    'access arguments' => array('administer application types'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 10,
    'file' => 'includes/recruit_application_ui.types.inc',
  );

  $items['admin/recruit/config/application'] = array(
    'title' => 'applications configuration',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recruit_ui_application_admin_settings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/recruit_application_ui.admin.inc',
  );
  
  return $items;
}

/**
 * Access callback: determine if the user can create any type of application.
 */
function recruit_application_ui_application_add_any_access() {
  // Grant automatic access to users with administer applications permission.
  if (user_access('administer applications')) {
    return TRUE;
  }

  // Check the user's access on a application type basis.
  foreach (recruit_application_types() as $type => $application_type) {
    if (recruit_application_access('create', $type)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_theme().
 */
function recruit_application_ui_theme() {
  return array(
    'application_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/recruit_application_ui.applications.inc',
    ),
    'application_type_admin_overview' => array(
      'variables' => array('type' => NULL),
      'file' => 'includes/recruit_application_ui.types.inc',
    ),
    'application_view_page' => array(
      'render element' => 'elements',
      'template' => 'theme/recruit-application',
    ),
  );
}

/**
 * Implements hook_forms().
 */
function recruit_application_ui_forms($form_id, $args) {
  $forms = array();

  // Define a wrapper ID for the application type add / edit form.
  $forms['recruit_application_ui_application_type_form'] = array(
    'callback' => 'recruit_application_application_type_form',
  );

  // Define a wrapper ID for the application type delete confirmation form.
  $forms['recruit_application_ui_application_type_delete_form'] = array(
    'callback' => 'recruit_application_application_type_delete_form',
  );

  // Define a wrapper ID for the application add / edit form.
  $forms['recruit_application_ui_application_form'] = array(
    'callback' => 'recruit_application_application_form',
  );

  // Define a wrapper ID for the application delete confirmation form.
  $forms['recruit_application_ui_application_delete_form'] = array(
    'callback' => 'recruit_application_application_delete_form',
  );

  return $forms;
}

/**
 * Custom menu item callback for titles.
 *
 * @param $application
 *   The application object as loaded via the URL wildcard.
 * @return
 *   A page title of the format "Application ID: [application id]".
 */
function recruit_application_ui_application_title($application) {
  return t('Application ID: @application_id', array('@application_id' => $application->application_id));
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * @see recruit_application_ui_application_form()
 */
function recruit_application_ui_form_recruit_application_ui_application_form_alter(&$form, &$form_state) {
  // Add a submit handler to the save button to add a redirect.
  $form['actions']['submit']['#submit'][] = 'recruit_application_ui_application_form_submit';

  // Add the save and continue button for new applications.
  if (empty($form_state['recruit_application']->application_id)) {
    $form['actions']['save_continue'] = array(
      '#type' => 'submit',
      '#value' => t('Save and add another'),
      '#submit' => $form['actions']['submit']['#submit'],
      '#suffix' => l('Cancel', 'admin/recruit/applications'),
      '#weight' => 45,
    );
  }
  else {
    $form['actions']['submit']['#suffix'] = l('Cancel', 'admin/recruit/applications');
  }
}

/**
 * Submit callback for recruit_application_ui_application_form().
 *
 * @see recruit_application_ui_form_recruit_application_ui_application_form_alter()
 */
function recruit_application_ui_application_form_submit($form, &$form_state) {
  // Set the redirect based on the button clicked.
  if ($form_state['clicked_button']['#parents'][0] == 'save_continue') {
    $form_state['redirect'] = 'admin/recruit/applications/add/' . strtr($form_state['recruit_application']->type, array('_' => '-'));
  }
  elseif (arg(2) == 'applications' && arg(3) == 'add') {
    $form_state['redirect'] = 'admin/recruit/applications';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see recruit_application_ui_application_delete_form()
 */
function recruit_application_ui_form_recruit_application_ui_application_delete_form_alter(&$form, &$form_state) {
  $form['actions']['cancel']['#markup'] = l(t('Cancel'), 'admin/recruit/applications');

  $form['#submit'][] = 'recruit_application_ui_application_delete_form_submit';
}

/**
 * Submit callback for recruit_application_ui_application_delete_form().
 *
 * @see recruit_application_ui_form_recruit_application_ui_application_delete_form_alter()
 */
function recruit_application_ui_application_delete_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/recruit/applications';
}

/**
 * Sets the breadcrumb for administrative application pages.
 *
 * @param $application_types
 */
function recruit_application_ui_set_breadcrumb($application_types = FALSE) {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Recruit'), 'admin/recruit'),
    l(t('Applications'), 'admin/recruit/applications'),
  );

  if ($application_types) {
    $breadcrumb[] = l(t('Application types'), 'admin/Recruit/applications/types');
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implements hook_entity_info_alter().
 */
function recruit_application_ui_entity_info_alter(&$entity_info) {
  // Add a URI callback to the application entity.
  $entity_info['recruit_application']['uri callback'] = 'recruit_application_ui_uri';

  // Expose the admin UI for application fields.
  foreach ($entity_info['recruit_application']['bundles'] as $type => &$bundle) {
    $bundle['admin'] = array(
      'path' => 'admin/recruit/applications/types/%recruit_application_type',
      'real path' => 'admin/recruit/applications/types/' . strtr($type, array('_' => '-')),
      'bundle argument' => 4,
      'access arguments' => array('administer application types'),
    );
  }
}

/**
 * Entity uri callback: points to the edit form of the given application.
 */
function recruit_application_ui_uri($application) {
  //Return URI only if user has content.
  if (recruit_application_access('view', $application)) {
    return array(
      'path' => 'admin/recruit/applications/' . $application->application_id,
    );
  }

  return NULL;
}


/**
 * Implements hook_form_alter().
 */
function recruit_application_ui_form_alter(&$form, &$form_state, $form_id) {
  // On field administration forms for application types add a breadcrumb.
  if (in_array($form_id, array('field_ui_field_overview_form', 'field_ui_display_overview_form'))) {
    if ($form['#entity_type'] == 'recruit_application') {
      recruit_application_ui_set_breadcrumb(TRUE);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see recruit_application_ui_recruit_type_form()
 */
function recruit_application_ui_form_recruit_application_ui_application_type_form_alter(&$form, &$form_state) {
  // Add a submit handler to the save button to add a redirect.
  $form['actions']['submit']['#submit'][] = 'recruit_application_ui_application_type_form_submit';
  
  if (!empty($form_state['application_type']->type)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete application type'),
      '#suffix' => l('Cancel', 'admin/recruit/applications/types'),
      '#submit' => array('recruit_application_ui_application_type_form_delete_submit'),
      '#weight' => 45,
    );
  }
  else {
    $form['actions']['save_continue'] = array(
      '#type' => 'submit',
      '#value' => t('Save and add fields'),
      '#suffix' => l('Cancel', 'admin/recruit/applications/types'),
      '#submit' => array('recruit_application_application_type_form_submit', 'recruit_application_ui_application_type_form_submit'),
      '#weight' => 45,
    );
  }
}

/**
 * Submit callback for delete button on recruit_application_ui_application_type_form().
 *
 * @see recruit_application_ui_form_recruit_application_ui_application_type_form_alter()
 */
function recruit_application_ui_application_type_form_delete_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/recruit/applications/types/' . $form_state['application_type']->type . '/delete';
}

/**
 * Submit callback for recruit_application_ui_application_type_form().
 *
 * @see recruit_application_ui_form_recruit_application_ui_application_type_form_alter()
 */
function recruit_application_ui_application_type_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#parents'][0] == 'save_continue') {
    $form_state['redirect'] = 'admin/recruit/applications/types/' . $form_state['application_type']->type . '/fields';
  }
  else {
    $form_state['redirect'] = 'admin/recruit/applications/types';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see recruit_application_ui_application_type_delete_form()
 */
function recruit_application_ui_form_recruit_application_ui_application_type_delete_form_alter(&$form, &$form_state) {
  $form['actions']['cancel']['#markup'] = l(t('Cancel'), 'admin/recruit/applications/types');

  $form['#submit'][] = 'recruit_application_ui_application_type_delete_form_submit';
}

/**
 * Submit callback for recruit_application_ui_application_type_delete_form().
 *
 * @see recruit_application_ui_form_recruit_application_ui_application_type_delete_form_alter()
 */
function recruit_application_ui_application_type_delete_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/recruit/applications/types';
}

/**
 * Implements hook_menu_alter().
 */
function recruit_application_ui_menu_alter(&$items) {
  $items['admin/recruit/applications/types/%recruit_application_type/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  $items['admin/recruit/applications/types/%recruit_application_type/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function recruit_application_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/recruit/applications') {
    $item = menu_get_item('admin/recruit/applications/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_menu_map().
 */
function recruit_application_ui_admin_menu_map() {
  $map['admin/recruit/applications/types/%recruit_application_type'] = array(
    'parent' => 'admin/recruit/applications/types',
    'arguments' => array(
      array('%recruit_application_type' => array_keys(recruit_application_types())),
    ),
  );

  return $map;
}

/**
 * Implements hook_help().
 */
function recruit_application_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/recruit/applications/types/add':
      return '<p>' . t('Individual application types can have different fields assigned to them.') . '</p>';
  }

  if ($arg[1] == 'recruit' && $arg[2] == 'application' && $arg[3] == 'add' && $arg[4]) {
    $application_type = recruit_application_type_load(str_replace('-', '_', $arg[4]));
    return (!empty($application_type->help) ? '<p>' . filter_xss_admin($application_type->help) . '</p>' : '');
  }
}

/**
 * Implements hook_views_api().
 */
function recruit_application_ui_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'recruit_application_ui') . '/includes/views',
  );
}

/**
 * Generate an array for rendering the given application.
 *
 * @param $application
 *   A application object.
 * @param $view_mode
 *   View mode, e.g. 'full'.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function recruit_application_ui_application_view($application, $view_mode = 'full') {
  // Retrieve all application fields and attach to $account->content.
  recruit_application_ui_application_build_content($application, $view_mode);
  
  $build = $application->content;

  //Unset variable to avoid dupliate rendering.
  unset($application->content);

  $build += array(
    '#theme' => 'application_view_page',
    '#application' => $application,
    '#view_mode' => $view_mode,
  );

  // Allow modules to modify the structured user.
  drupal_alter('recruit_application_ui_application_view', $build);

  return $build;
}

/**
 * Builds a structured array representing the application content.
 *
 * @param $application
 *   A application object.
 * @param $view_mode
 *   View mode, e.g. 'full'.
 */
function recruit_application_ui_application_build_content($application, $view_mode = 'full') {
  // Remove previously built content, if exists.
  $application->content = array();

  // Build fields content.
  field_attach_prepare_view('recruit_application', array($application->application_id => $application), $view_mode);
  entity_prepare_view('recruit_application', array($application->application_id => $application));
  $application->content += field_attach_view('recruit_application', $application, $view_mode);

  // Populate $account->content with a render() array.
  module_invoke_all('recruit_application_ui_application_view', $application, $view_mode);
}


/**
 * Process variables for application-page.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $application
 *
 * @see application-page.tpl.php
 */
function recruit_application_ui_preprocess_application_view_page(&$variables) {

  $variables['application'] = $variables['elements']['#application'];
  $application = $variables['application'];
  
  // Helpful $application_content variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['application_content'][$key] = $variables['elements'][$key];
  }
  // Preprocess fields.
  field_attach_preprocess('recruit_application', $application, $variables['elements'], $variables);

  $variables['created'] = format_date($application->created, 'custom', 'm/d/Y');
  $variables['changed'] = format_date($application->changed, 'custom', 'm/d/Y');
  $variables['name']      = theme('username', array('account' => $application));

  $variables['content'] = render($variables['application_content']);

  // Gather node classes.
  $variables['classes_array'][] = drupal_html_class('recruit-application-' . $application->type);

  // Clean up name so there are no underscores.
  $variables['theme_hook_suggestions'][] = 'recruit-application-' . $application->type;
  $variables['theme_hook_suggestions'][] = 'recruit-application-' . $application->application_id;
}

/**
 * Implements hook_field_formatter_info().
 * Add extra formatter for recruit_application_reference field.
 */
function recruit_application_ui_field_formatter_info() {
  return array(
    'recruit_application_ui_application_full' => array(
      'label' => t('application: Full content'),
      'field types' => array('recruit_application_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function recruit_application_ui_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // Collect the list of application IDs.
  $application_ids = array();

  foreach ($items as $delta => $item) {
    $application_ids[$item['application_id']] = $item['application_id'];
  }

  $applications = recruit_application_load_multiple($application_ids);

  switch ($display['type']) {
    case 'recruit_application_ui_application_full':
      foreach ($items as $delta => $item) {
      
        $application_content = recruit_application_ui_application_view($applications[$item['application_id']]);
        $result[$delta] = array(
          '#markup' => render($application_content),
        );
      }
      break;
  }

  return $result;
}