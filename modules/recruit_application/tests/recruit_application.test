<?php

/**
 * @file
 * Unit tests for Application sub-module.
 */


class RecruitApplicationTestBase extends DrupalWebTestCase {

  /**
   * Creates a test job.
   *
   * @return object
   */
  public function createTestJob($node_type = 'recruit_job', $application_type = 'recruit_application') {
    $node = $this->drupalCreateNode(array('type' => $node_type));
    // Assign application type.
    $node->{RECRUIT_APPLICATION_REF_FIELD}[$node->language][0] = array('type' => $application_type);
    node_save($node);
    return $node;
  }

  /**
   * Creates a test application.
   *
   * @param $job
   * @param $first_name
   * @param $last_name
   * @param $mail
   * @return object
   */
  public function createTestApplication($job, $first_name, $last_name, $mail, $application_type = 'recruit_application') {
    $application = recruit_application_new($application_type);
    $application->uid = 1;
    $application->{RECRUIT_APPLICATION_FIRST_NAME_FIELD}[LANGUAGE_NONE][0]['value'] = $first_name;
    $application->{RECRUIT_APPLICATION_LAST_NAME_FIELD}[LANGUAGE_NONE][0]['value'] = $last_name;
    $application->{RECRUIT_APPLICATION_JOB_FIELD}[LANGUAGE_NONE][0]['target_id'] = $job->nid;
    $application->{RECRUIT_APPLICATION_EMAIL_FIELD}[LANGUAGE_NONE][0]['email'] = $mail;
    recruit_application_save($application);
    return $application;
  }
}

/**
 * Test the application and application type CRUD.
 */
class RecruitApplicationTest extends RecruitApplicationTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Application',
      'description' => 'Ensure that application sub-module works.',
      'group' => 'Recruit',
    );
  }

  public function setUp() {
    parent::setUp('recruit_application');
  }

  /**
   * Ensure the default application type is created.
   */
  public function testRecruitApplicationDefaultApplication() {
    $default_types = array(
      'recruit_application' => 'Application',
    );

    // Load the default application types.
    $types_created = recruit_application_types();

    // Ensure each type exists.
    foreach ($default_types as $type => $name) {
      $this->assertTrue(!empty($types_created[$type]), 'Application type ' . check_plain($type) . ' has been created.');
    }
  }

  /**
   * Test the application type CRUD functions.
   */
  public function testRecruitApplicationTypeCrud() {
    // Ensure recruit_application_type_new() returns a valid empty application type.
    $new_application_type = recruit_application_type_new();
    $this->assertNull($new_application_type->type, 'recruit_application_type_new() instantiated the type property.');
    $this->assertNotNull($new_application_type->label, 'recruit_application_type_new() instantiated the label property.');
    $this->assertNotNull($new_application_type->description, 'recruit_application_type_new() instantiated the description property.');
    $this->assertTrue($new_application_type->is_new, 'recruit_application_type_new() instantiated the is_new property.');

    $type = $this->randomName(20);
    $label = $this->randomName(40);
    $description = $this->randomString(128);

    $new_application_type->type = $type;
    $new_application_type->label = $label;
    $new_application_type->description = $description;

    recruit_application_type_save($new_application_type);

    $saved_application_type = recruit_application_type_load($type);
    $this->assertTrue($saved_application_type, 'recruit_application_type_load() loaded the new application type.');
    $this->assertEqual($type, $saved_application_type->type, 'The new application type type was properly saved and loaded.');
    $this->assertEqual($label, $saved_application_type->label, 'The new application type label was properly saved and loaded.');
    $this->assertEqual($description, $saved_application_type->description, 'The new application type description text was properly saved and loaded.');

    $altered_label = $this->randomName(40);
    $saved_application_type->label = $altered_label;
    recruit_application_type_save($saved_application_type);

    $updated_application_type = recruit_application_type_load($type);

    $this->assertEqual($altered_label, $updated_application_type->label, 'Updated application type label using recruit_application_type_save().');

    recruit_application_type_delete($updated_application_type);

    $deleted_type = recruit_application_type_load($type);
    $this->assertFalse($deleted_type, 'recruit_application_type_delete() successfully removed an application type.');
  }

  /**
   * Test the application CRUD functions.
   */
  public function testRecruitApplicationCrud() {
    // Ensure recruit_application_new() returns a new application.
    $new_application = recruit_application_new('recruit_application');
    $fields = array('type', 'uid');
    foreach ($fields as $field) {
      $this->assertNotNull($new_application->{$field}, 'recruit_application_new() instantiated the ' . check_plain($field) . ' property.');
    }

    $new_application->type = $type = 'recruit_application';
    $new_application->uid = 1;

    recruit_application_save($new_application);

    $loaded_application = recruit_application_load($new_application->aid);

    foreach ($fields as $field) {
      $this->assertEqual($loaded_application->{$field}, $new_application->{$field}, 'The ' . check_plain($field) . ' value loaded by recruit_application_load() matches the value saved by recruit_application_save()');
    }

    $this->assertTrue($loaded_application->created > 0, 'recruit_application_save() added a created date to the application');
    $this->assertTrue($loaded_application->changed > 0, 'recruit_application_save() added a changed date to the application');

    //$this->assertNotNull($loaded_application->application_assignee, 'Ensure assignee field is present.');

    $loaded_application->uid = 0;


    recruit_application_save($loaded_application);

    $updated_application = recruit_application_load($loaded_application->aid);
    $this->assertEqual($updated_application->uid, 0, 'recruit_application_save() successfully updated the application.');

    // Ensure recruit_application_load_multiple() can load multiple multiple applications.
    $saved_application_ids = array();

    // First create and save multiple new applications.
    for ($i = 0; $i < 3; $i++) {
      $application = recruit_application_new('recruit_application');
      $application->type = 'recruit_application';
      $application->uid = 1;
      recruit_application_save($application);

      // Save the ID and title of the newly created application.
      $saved_application_ids[$application->aid] = $application->aid;
    }

    $loaded_applications = recruit_application_load_multiple(array_keys($saved_application_ids));
    $this->assertEqual(count($saved_application_ids), count($loaded_applications), 'recruit_application_load_multiple() loaded the proper number of the applications.');
    foreach ($loaded_applications as $loaded_application) {
      $this->assertEqual($loaded_application->aid, $saved_application_ids[$loaded_application->aid], 'recruit_application_load_multiple() successfully loaded a application.');
    }

    // Ensure recruit_application_delete() can remove a application.
    recruit_application_delete($new_application);
    $deleted_application_load = recruit_application_load_multiple(array($new_application->aid), array(), TRUE);
    $this->assertFalse($deleted_application_load, 'recruit_application_load_multiple() could not load the deleted application.');

    // Ensure recruit_application_delete_multiple() can delete multiple applications.
    recruit_application_delete_multiple(array_keys($saved_application_ids));
    $deleted_applications_load = recruit_application_load_multiple(array_keys($saved_application_ids), array(), TRUE);
    $this->assertFalse($deleted_applications_load, 'recruit_application_load_multiple() could not load the deleted applications.');

  }

  /**
   * Test apply now link.
   */
  public function testRecruitApplicationApplyLink() {
    // Create job.
    $node = $this->createTestJob();
    $this->drupalGet('node/' . $node->nid);
    $this->assertNoText('Apply now', 'Users without access should not see apply now link.');

    // Log user in.
    $web_user = $this->drupalCreateUser(array('create recruit_application entities'));
    $this->drupalLogin($web_user);

    $this->drupalGet('node/' . $node->nid);
    $this->assertText('Apply now', 'Found apply now link.');
  }

  /**
   * Test settings like confirmation and message when processed by token.
   */
  function testSettingsTokenProperties() {
    // Create job.
    $job = $this->createTestJob();
    // Define application first, last name and email.
    $first_name = 'test-first';
    $last_name = 'test-last';
    $mail = 'test@example.com';
    // Create application.
    $application = $this->createTestApplication($job, $first_name, $last_name, $mail);
    // Define new subject and message.
    $subject = 'Confirming [recruit_application:recruit-application-job:title]';
    $message = 'Hi [recruit_application:recruit-application-first-name]';
    // Set custom confirmation subject and message.
    variable_set('recruit_application_confirmation_mail_subject_' . $application->type, $subject);
    variable_set('recruit_application_confirmation_mail_message_' . $application->type, $message);

    $wrapper = entity_metadata_wrapper('recruit_application', $application);
    $processed_subject = $wrapper->confirmation_mail_subject->value();
    $processed_message = $wrapper->confirmation_mail_message->value();

    $this->assertEqual($processed_subject, 'Confirming ' . $job->title, 'Subject has been processed');
    $this->assertEqual($processed_message, 'Hi ' . $first_name, 'Message has been processed');

  }
}
