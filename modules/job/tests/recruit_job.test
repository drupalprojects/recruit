<?php

/**
 * @file
 * Unit/Functional tests for the job module.
 */

/**
 * Test the job and job type CRUD.
 */
class RecruitJobCRUDTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Recruit job API CRUD',
      'description' => 'Tests the job CRUD functions.',
      'group' => 'Recruit',
    );
  }

  function setUp() {
    parent::setUp('recruit_job');
  }

  /**
   * Ensure the default job types are created when installing recruit_job.module.
  */
  function testRecruitJobDefaultJobs() {
    $default_types = array(
      'job' => 'Job',
    );

    $types_created = recruit_job_get_types();
    
    // Testing for default job type.
    foreach ($default_types as $type => $name) {
      $this->assertTrue(!empty($types_created[$type]), 'Job type ' . check_plain($type) . ' has been created.');
    }
  }

  /**
   * Test the job type CRUD functions.
   */
  function testRecruitJobTypeCrud() {
    // Ensure recruit_job_type_new() returns a valid empty job type.
    $new_job_type = recruit_job_type_new();
    $this->assertNotNull($new_job_type->type, 'recruit_job_type_new() instantiated the type property.');
    $this->assertNotNull($new_job_type->label, 'recruit_job_type_new() instantiated the name property.');
    $this->assertNotNull($new_job_type->description, 'recruit_job_type_new() instantiated the description property.');
    $this->assertNotNull($new_job_type->help, 'recruit_job_type_new() instantiated the help property');

    // Supply customer values for the job type properties.
    $type = $this->randomName(20);
    $name = $this->randomName(40);
    $description = $this->randomString(128);
    $help = $this->randomString(128);

    // Add the values to the new job type.
    $new_job_type->type = $type;
    $new_job_type->label = $name;
    $new_job_type->description = $description;
    $new_job_type->help = $help;
    $new_job_type->is_new = TRUE;

    // Ensure recruit_job_type_new() returns the proper value when inserting.
    recruit_job_type_save($new_job_type);
    
    // Load saved job type to make sure it has been saved.
    $create_job_type = recruit_job_type_load($new_job_type->type);
    $this->assertEqual($create_job_type->type, $new_job_type->type, 'recruit_job_type_save() has saved a new job type.');

    // Load the newly saved content type.
    $saved_job_type = recruit_job_type_load($type);

    // Ensure the values that were saved match the values that we created.
    $this->assertTrue($saved_job_type, 'recruit_job_type_load() loaded the new job type.');
    $this->assertEqual($type, $saved_job_type->type, 'The new job type type was properly saved and loaded.');
    $this->assertEqual($name, $saved_job_type->label, 'The new job type label was properly saved and loaded.');
    $this->assertEqual($description, $saved_job_type->description, 'The new job type description text was properly saved and loaded.');
    $this->assertEqual($help, $saved_job_type->help, 'The new job type help text was properly saved and loaded.');

    // Alter the title, to ensure the update function works.
    $altered_name = $this->randomName(40);
    $saved_job_type->label = $altered_name;

    // Reset the cached job types, and verify recruit_job_get_types load the saved type.
    recruit_job_type_reset();
    $types = recruit_job_get_types();
    $this->assertNotNull($types[$type], 'recruit_job_types_reset() successfully reset the job types.');
    $this->assertEqual($saved_job_type->label, $altered_name, 'recruit_job_type_save() successfully updated the job type name.');

    // Ensure recruit_job_type_delete() deletes a content type.
    recruit_job_type_delete($saved_job_type);
    $deleted_type = recruit_job_type_load($type);
    $this->assertFalse($deleted_type, 'recruit_job_type_delete() successfully removed a job type.');
  }

  /**
   * Test the job CRUD functions.
   */
  function testRecruitJobCrud() {
    // Ensure recruit_job_new() returns a new job.
    $new_job = recruit_job_new('job');
    $fields = array('jid', 'job_ref', 'type', 'title', 'uid');
    foreach ($fields as $field) {
      $this->assertNotNull($new_job->{$field}, 'recruit_job_new() instantiated the ' . check_plain($field) . ' property.');
    }

    $new_job->job_ref = $job_ref = $this->randomName(10);
    $new_job->type = $type = 'job';
    $new_job->title = $title = $this->randomName(10);
    $new_job->uid = $uid = 1;

    // Ensure recruit_job_save() returs TRUE when saving a new job.
    $return = recruit_job_save($new_job);
    $this->assertEqual($return, SAVED_NEW, 'recruit_job_save() returned SAVED_NEW when saving a new job.');

    // Ensure recruit_job_load() loaded the saved job.
    $loaded_job = recruit_job_load($new_job->jid);
    foreach ($fields as $field) {
      $this->assertEqual($loaded_job->{$field}, $new_job->{$field}, 'The ' . check_plain($field) . ' value loaded by recruit_job_load() matches the value saved by recruit_job_save()');
    }

    $this->assertTrue($loaded_job->created > 0, 'recruit_job_save() added a created date to the job');
    $this->assertTrue($loaded_job->changed > 0, 'recruit_job_save() added a changed date to the job');

    // Ensure recruit_job_load_by_job_ref() can load a job by job ref.
    $loaded_job_by_job_ref = recruit_job_load_by_job_ref($job_ref);
    $this->assertEqual($loaded_job_by_job_ref[$new_job->jid]->jid, $new_job->jid, 'The ID of the job loaded via recruit_job_load_by_job_ref() matches the saved job ID.');

    // Ensure recruit_job_load_multiple() can load multiple jobs.
    $saved_jobs = array();

    // First create and save multiple new jobs.
    for ($i = 0; $i < 3; $i++) {
      $job = recruit_job_new('job');
      $job->type = 'job';
      $job->job_ref = $this->randomName(10);
      $job->title = $this->randomName(10);
      $job->uid = 1;
      recruit_job_save($job);

      // Save the ID and title of the newly created job.
      $saved_jobs[$job->jid] = $job->title;
    }

    $loaded_jobs = recruit_job_load_multiple(array_keys($saved_jobs));
    $this->assertEqual(count($saved_jobs), count($loaded_jobs), 'recruit_job_load_multiple() loaded the proper number of the jobs.');
    foreach ($loaded_jobs as $loaded_job) {
      $this->assertEqual($loaded_job->title, $saved_jobs[$loaded_job->jid], 'recruit_job_load_multiple() successfully loaded a job.');
    }

    // Ensure recruit_job_delete() can remove a job.
    $return = recruit_job_delete($new_job);
    $deleted_job_load = recruit_job_load_multiple(array($new_job->jid), array(), TRUE);
    $this->assertFalse($deleted_job_load, 'recruit_job_load_multiple() could not load the deleted job.');

    // Ensure recruit_job_delete_multiple() can delete multiple jobs.
    $return = recruit_job_delete_multiple(array_keys($saved_jobs));
    $deleted_jobs_load = recruit_job_load_multiple(array_keys($saved_jobs), array(), TRUE);
    $this->assertFalse($deleted_jobs_load, 'recruit_job_load_multiple() could not load the deleted jobs.');
  }
 
}